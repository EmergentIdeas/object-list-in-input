{"version":3,"file":"pages.js","mappings":";;;;;;;;AAAA;AACA,oCAAoC;AACpC;AACA,6BAA6B;AAC7B,8BAA8B;AAC9B,8BAA8B;AAC9B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA;;AAEA;;;;;;;;;;;ACZA,mBAAmB,mBAAO,CAAC,uEAAqB;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;;;AAIA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,eAAe,kBAAkB,aAAa;AACxE;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B,QAAQ,QAAQ;AACvE;AACA;AACA;AACA,sCAAsC;AACtC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACrMA,sBAAsB,mBAAO,CAAC,yFAAsB;AACpD,yBAAyB,mBAAO,CAAC,kGAAyB;AAC1D,uBAAuB,mBAAO,CAAC,4FAAuB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,4FAAuB;;;AAGnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,WAAW,KAAK,GAAG,MAAM,GAAG,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK,GAAG,OAAO;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;AC3PA,iEAAe,gBAAgB,oBAAoB,WAAW,cAAc,YAAY,aAAa,mBAAmB,eAAe,4BAA4B,qBAAqB,0BAA0B,4BAA4B,0BAA0B,oBAAoB,GAAG,wBAAwB,eAAe,GAAG,yBAAyB,uBAAuB,2BAA2B,WAAW,cAAc,YAAY,aAAa,8BAA8B,gBAAgB,iBAAiB,eAAe,OAAO,iCAAiC,uBAAuB,0BAA0B,eAAe,uBAAuB,4BAA4B,qBAAqB,0BAA0B,+DAA+D,GAAG,oCAAoC,wBAAwB,GAAG,sCAAsC,uBAAuB,aAAa,eAAe,gCAAgC,oBAAoB,GAAG,qCAAqC,qCAAqC,qBAAqB,oBAAoB,GAAG,qCAAqC,2BAA2B,kBAAkB,mBAAmB,kCAAkC,GAAG,qCAAqC,kCAAkC,kBAAkB,GAAG,4CAA4C,uBAAuB,GAAG,CAAC;;;;;;;;;;ACAl5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,4FAAuB;;;;AAInC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;;AAGA;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,mBAAO,CAAC,4FAAuB;;;AAGnC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;;AAGA;;;;;;;;;;;AC7CA;AACA,YAAY;AACZ,eAAe;AACf,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnEe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtB+C;AACK;AACQ;AACV;AACR;;;AAG3B,6BAA6B,0DAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,qEAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qEAAgB;AACnC;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qEAAgB;AACnC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,4DAAc;AACxD,sCAAsC,wDAAU;;;;;;;;;;;;;;;;AC5JuB;;AAExD;;AAEf,qBAAqB,6BAA6B,sBAAsB,iEAAoB,uBAAuB,6CAA6C;AAChK;AACA;AACA,4BAA4B;AAC5B,uCAAuC;AACvC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;;;;;;;;;;;;;AChBe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACfe;AACf;AACA;AACA;AACA,EAAE;AACF;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACV8B;;;;;;;;;;;;;;;;;;ACDW;AACzC;AACsD;AACE;;AAExD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,6BAA6B;AACnC;AACA;AACA;AACA;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,8DAAgB;AACvE,mBAAmB,mEAAiB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzMe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAuD;AACnE,YAAY,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;ACvI+C;AACe;AACX;;AAEnD,yBAAyB,6DAAc;;AAExB,uBAAuB,0DAAI;;AAE1C;AACA;AACA,YAAY,QAAQ;AACpB;AACA,2BAA2B;AAC3B;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,sBAAsB,gFAAO;AAC7B;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,uBAAuB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,YAAY,gBAAgB;AAC5B,YAAY,GAAG;AACf,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,GAAG;AACf;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvmB8B;AACqB;AACK;;;AAGzC,+BAA+B,sCAAM;AACpD;AACA;AACA,YAAY,QAAQ;AACpB;AACA,YAAY,QAAQ;AACpB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAiB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uEAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;;;;;;;;;;;;;AChEA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtBuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,sDAAS;AAC1C;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvFA;AACA,CAAuC;AACO;;AAE9C;AACA,WAAW,0DAAY;AACvB;AACA;AACA,WAAW,sDAAS;AACpB;;;AAGA,iEAAe;;;;;;;;;;;;;;;ACXA;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;SCnCA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;ACLoD;;AAEpD;AACA;AACA,gBAAgB,6DAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA","sources":["webpack://object-list-in-input/./node_modules/@dankolz/escape-html-attribute-value/index.js","webpack://object-list-in-input/./node_modules/ei-dialog/dialog.js","webpack://object-list-in-input/./node_modules/form-value-injector/form-value-injector.js","webpack://object-list-in-input/./node_modules/input-value-injector/input-value-injector.js","webpack://object-list-in-input/./node_modules/ei-dialog/dialog-styles.txt","webpack://object-list-in-input/./node_modules/select-value-injector/select-value-injector.js","webpack://object-list-in-input/./node_modules/textarea-value-injector/textarea-value-injector.js","webpack://object-list-in-input/./node_modules/value-injector-common/value-injector-common.js","webpack://object-list-in-input/./client-lib/generate-styles.mjs","webpack://object-list-in-input/./client-lib/index.mjs","webpack://object-list-in-input/./client-lib/render-tile.mjs","webpack://object-list-in-input/./node_modules/@webhandle/backbone-view/client-js/event-entry-mapper.js","webpack://object-list-in-input/./node_modules/@webhandle/backbone-view/client-js/extract-event-names.js","webpack://object-list-in-input/./node_modules/@webhandle/backbone-view/client-js/generate-id.js","webpack://object-list-in-input/./node_modules/@webhandle/backbone-view/client-js/index.js","webpack://object-list-in-input/./node_modules/@webhandle/backbone-view/client-js/view.js","webpack://object-list-in-input/./node_modules/@webhandle/drag-sortable-list/client-lib/data-item-worker.mjs","webpack://object-list-in-input/./node_modules/@webhandle/drag-sortable-list/client-lib/list-view.mjs","webpack://object-list-in-input/./node_modules/@webhandle/form-answer-dialog/client-lib/form-answer-dialog.mjs","webpack://object-list-in-input/./node_modules/@webhandle/gather-form-data/gather-form-data.mjs","webpack://object-list-in-input/./node_modules/@webhandle/minimal-browser-event-emitter/client-js/event-emitter.mjs","webpack://object-list-in-input/./node_modules/@webhandle/minimal-browser-event-emitter/client-js/index.js","webpack://object-list-in-input/./node_modules/@webhandle/minimal-browser-event-emitter/client-js/streamish.mjs","webpack://object-list-in-input/webpack/bootstrap","webpack://object-list-in-input/webpack/runtime/define property getters","webpack://object-list-in-input/webpack/runtime/hasOwnProperty shorthand","webpack://object-list-in-input/webpack/runtime/make namespace object","webpack://object-list-in-input/./client-js/pages.mjs"],"sourcesContent":["function escapeHtmlAttributeValue(s, preserveCR) {\n    preserveCR = preserveCR ? '&#13;' : '\\n';\n    return ('' + s) \n        .replace(/&/g, '&amp;') \n        .replace(/'/g, '&apos;') \n        .replace(/\"/g, '&quot;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\\r\\n/g, preserveCR) \n        .replace(/[\\r\\n]/g, preserveCR)\n}\n\nmodule.exports = escapeHtmlAttributeValue\n","let dialogStyles = require('./dialog-styles.txt')\nlet sequence = 0\n\n// If we're loading via a module system or packed by webpack, we may\n// have a module here instead of the value. We need to check for default\n// and use that if it exists.\nif(typeof dialogStyles !== 'string' && dialogStyles.default) {\n\tdialogStyles = dialogStyles.default\t\n}\n\n\n/**\n * A button definition.\n * @typedef {Object} Button\n * @property {string} classes Classes to add to the button\n * @property {string} label Text shown to the user\n */\n\n\n\n/**\n * A whole page dialog. \n * @param {object} options \n * @param {string,function} options.body The contents of the body section. This can be a string,\n * in which case it will just be inserted into the body. It can be a function, in which case\n * it is expected to return a string (which will be inserted) or a Promise, which should resolve to\n * a string, which will be inserted. However, this function is passed the body element and dialog\n * object as arguments, so it can also modify content directory and return an empty string.\n * @param {object} options.on An object which the key is the selector and the value is a funtion\n * which is called when the object with that selector is clicked. If the function returns false the\n * dialog will not be closed. If it returns a Promise, the promise will be resolved and if the resolved\n * value is false, it will not be closed. Any other return condition will result in the dialog being\n * closed.\n * @param {Button[]} options.buttons The buttons that will show up in the footer of the dialog. If buttons are not\n * specified, \"OK\" and \"Cancel\" buttons will be added.\n * @param {string} options.title The title of the dialog\n * @param {string} options.dialogFrameClass An additional string inserted into the class attribute for\n * specific styling of specific types of dialog boxes.\n * @param {function} options.afterOpen A function which is called after open with the body element and dialog object\n * as arguments.\n */\nvar Dialog = function(options) {\n\tthis.id = \"dialog\" + (new Date().getTime()) + (sequence++)\n\tObject.assign(this, options)\n\tif(!this.on) {\n\t\tthis.on = {}\n\t}\n\tif(!this.on['.btn-cancel']) {\n\t\tthis.on['.btn-cancel'] = function() {\n\t\t}\n\t}\n\tif(!this.on['.btn-close']) {\n\t\tthis.on['.btn-close'] = function() {\n\t\t}\n\t}\n\t\n\tif(!options.buttons) {\n\t\tthis.buttons = [\n\t\t\t{\n\t\t\t\tclasses: 'btn btn-primary btn-ok',\n\t\t\t\tlabel: 'OK'\n\t\t\t},\n\t\t\t{\n\t\t\t\tclasses: 'btn btn-cancel',\n\t\t\t\tlabel: 'Cancel'\n\t\t\t}\n\t\t]\n\t}\n\t\n\tthis.body = options.body\n}\n\nDialog.prototype.getBodySelector = function() {\n\treturn '#' + this.id + ' .body'\n}\n\nDialog.prototype.getFrameSelector = function() {\n\treturn '#' + this.id \n}\n\nDialog.prototype.addStylesIfNeeded = function() {\n\tif(!document.querySelector('#dialog-frame-styles')) {\n\t\tdocument.querySelector('head').insertAdjacentHTML('beforeend', \n\t\t\t'<style type=\"text/css\" id=\"dialog-frame-styles\">' +\n\t\t\tdialogStyles + \n\t\t\t'</style>')\n\t}\n}\n\nDialog.prototype.renderButton = function(button) {\n\treturn `<button class=\"${button.classes}\" type=\"button\">${button.label}</button>`\n}\n\nDialog.prototype.generateFrame = function() {\n\tlet buttons = this.buttons.map(this.renderButton).join('')\n\t\n\treturn `\n<div class=\"dialog-frame ${this.dialogFrameClass || ''}\" id=\"${this.id}\" >\n\t<div class=\"mask\">\n\t</div>\n\t<div class=\"the-dialog\">\n\t\t<div class=\"close btn-close\">&times;</div>\n\t\t<div class=\"head\">\n\t\t\t${this.title}\n\t\t</div>\n\t\t<div class=\"body\">\n\t\t</div>\n\t\t<div class=\"foot\">\n\t\t\t${buttons}\n\t\t</div>\n\t</div>\n</div>\n\t`\n}\n\nDialog.prototype.open = function() {\n\tlet self = this\n\tthis.addStylesIfNeeded()\n\tdocument.querySelector('body').insertAdjacentHTML('beforeend', this.generateFrame())\n\t\n\tlet bodySelector = this.getBodySelector()\n\tlet frameSelector = this.getFrameSelector()\n\t\n\tlet bodyContent\n\tlet bodyElement = document.querySelector(bodySelector)\n\tlet frameElement = document.querySelector(frameSelector)\n\n\t\n\t\n\tframeElement.addEventListener('click', function(evt) {\n\t\tfor(let selector in self.on) {\n\t\t\tlet target = frameElement.querySelector(selector)\n\t\t\tif(evt.target == target) {\n\t\t\t\tlet result = self.on[selector]()\n\t\t\t\tif(typeof result === 'boolean') {\n\t\t\t\t\tif(result) {\n\t\t\t\t\t\tself.close()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(typeof Promise === 'function' && result instanceof Promise) {\n\t\t\t\t\tresult.then(function(result) {\n\t\t\t\t\t\tif(result !== false) {\n\t\t\t\t\t\t\tself.close()\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tself.close()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t})\n\t\n\tfunction afterOpenResizeSetup() {\n\t\tsetTimeout(function() {\n\t\t\tlet head = document.querySelector(frameSelector + ' .head').clientHeight \n\t\t\tlet foot = document.querySelector(frameSelector + ' .foot').clientHeight\n\t\t\tlet topAndBottom = head + foot\n\n\t\t\tbodyElement.style.maxHeight = 'calc(90vh - ' + topAndBottom + 'px)'\n\t\t\tframeElement.classList.add('open')\n\t\t\t\n\t\t\tif(self.afterOpen) {\n\t\t\t\tself.afterOpen(bodyElement, self)\n\t\t\t}\n\t\t})\n\t}\n\t\n\tif(typeof this.body === 'function') {\n\t\tbodyContent = this.body(bodyElement, this)\n\t}\n\telse if(typeof this.body == 'string') {\n\t\tbodyContent = this.body\n\t}\n\n\tif(typeof bodyContent === 'string') {\n\t\tbodyElement.insertAdjacentHTML('beforeend', bodyContent)\n\t\tafterOpenResizeSetup()\n\t}\n\telse if(typeof Promise === 'function' && bodyContent instanceof Promise) {\n\t\tbodyContent.then(function(content) {\n\t\t\tbodyElement.insertAdjacentHTML('beforeend', content)\n\t\t\tafterOpenResizeSetup()\n\t\t})\n\t}\n\t\n\n\treturn this\n}\n\nDialog.prototype.close = function() {\n\tlet frame = document.querySelector(this.getFrameSelector())\n\tframe.remove()\n\treturn this\n}\n\nmodule.exports = Dialog\n\n","\nconst inputInjector = require('input-value-injector')\nconst textareaInjector = require('textarea-value-injector')\nconst selectInjector = require('select-value-injector')\n\nlet injectValues = function(text, values) {\n\t\n\tlet result = inputInjector(text, values)\n\tresult = textareaInjector(result, values)\n\tresult = selectInjector(result, values)\n\t\n\t\n\treturn result\n}\n\nmodule.exports = injectValues","const {\n\tevalFunction\n\t, attributeEscapes\n\t, fetchValue\n\t, isOrContains\n\t, escForRegex\n\t, escapeAttributeValue\n} = require('value-injector-common')\n\n\nfunction makeDate(date) {\n\tif(date instanceof Date) {\n\t\treturn date\n\t}\n\treturn new Date(date)\n}\n\nfunction pad(value, len, pad) {\n\tvalue = '' + value\n\twhile(value.length < len) {\n\t\tvalue = pad + value\n\t}\n\treturn value\n}\n\nfunction formatDate(date) {\n\tdate = makeDate(date)\n\tlet year = date.getFullYear()\n\tlet month = pad(date.getMonth() + 1, 2, '0')\n\tlet day = pad(date.getDate(), 2, '0')\n\n\treturn `${year}-${month}-${day}`\n}\nfunction formatTime(date) {\n\tdate = makeDate(date)\n\tlet hour = pad(date.getHours(), 2, '0')\n\tlet minute = pad(date.getMinutes(), 2, '0')\n\tlet sec = pad(date.getSeconds(), 2, '0')\n\tlet milli = pad(date.getMilliseconds(), 4, '0')\n\treturn `${hour}:${minute}`\n}\n\nfunction formatCombined(date) {\n\treturn formatDate(date) + 'T' + formatTime(date)\n}\n\nlet nameAttrPattern = /\\sname=[\"'](.*?)[\"']/i\nlet valAttrPattern = /\\svalue=[\"'](.*?)[\"']/i\nlet typeAttrPattern = /\\stype=[\"'](.*?)[\"']/i\nlet inputPattern = /(<input.*?>)/i\nlet checkedAttrPattern = /\\schecked(=[\"'](.*?)[\"'])?/i\n\n\nlet injectValues = function(text, values) {\n\t\n\tlet result = ''\n\t\n\ttext.split(inputPattern).forEach((item) => {\n\t\tif(item.toLowerCase().indexOf('<input') == 0) {\n\t\t\tlet r = item.match(nameAttrPattern)\n\t\t\tlet name = r ? r[1] : null\n\t\t\t\n\t\t\tr = item.match(typeAttrPattern)\n\t\t\tlet type = (r ? r[1] : 'text').toLowerCase()\n\t\t\t\n\t\t\t\n\t\t\tif(type === 'text' || type === 'hidden' || type === 'date' || type === 'time' || type === 'datetime-local'\n\t\t\t|| type === 'search' || type === 'email' || type === 'number' || type === 'tel' || type === 'url' \n\t\t\t|| type === 'month' || type === 'week' || type === 'color' || type === 'week'\n\t\t\t) {\n\t\t\t\tr = item.match(valAttrPattern)\n\t\t\t\tlet value = r ? r[1] : null\n\t\t\t\t\n\t\t\t\tlet newVal = fetchValue(values, name)\n\t\t\t\tif(type === 'date') {\n\t\t\t\t\tif(newVal) {\n\t\t\t\t\t\tlet orgValue = newVal\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tnewVal = formatDate(newVal)\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tnewVal = orgValue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(newVal == 'Invalid date') {\n\t\t\t\t\t\t\tnewVal = orgValue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(type === 'time') {\n\t\t\t\t\tif(newVal) {\n\t\t\t\t\t\tlet orgValue = newVal\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tnewVal = formatTime(newVal)\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tnewVal = orgValue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(newVal == 'Invalid date') {\n\t\t\t\t\t\t\tnewVal = orgValue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(type === 'datetime-local') {\n\t\t\t\t\tif(newVal) {\n\t\t\t\t\t\tlet orgValue = newVal\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tnewVal = formatCombined(newValue)\n\t\t\t\t\t\t} catch(e) {}\n\t\t\t\t\t\tif(newVal == 'Invalid date') {\n\t\t\t\t\t\t\tnewVal = orgValue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet replacementText\n\t\t\t\tif(newVal === null || newVal === undefined) {\n\t\t\t\t\treplacementText = ''\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnewVal = escapeAttributeValue(newVal)\n\t\t\t\t\treplacementText = ' value=\"' + newVal + '\"'\n\t\t\t\t}\n\n\n\t\t\t\tif(value != null) {\n\t\t\t\t\tif(newVal != null) {\n\t\t\t\t\t\titem = item.replace(valAttrPattern, replacementText)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(item.endsWith('/>')) {\n\t\t\t\t\t\titem = item.slice(0, -2)\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\titem = item.slice(0, -1)\n\t\t\t\t\t}\n\t\t\t\t\titem = item + replacementText + ' />'\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult += item\n\t\t\t}\n\t\t\telse if(type === 'radio') {\n\t\t\t\tr = item.match(valAttrPattern)\n\t\t\t\tlet value = r ? r[1] : null\n\t\t\t\tlet newVal = fetchValue(values, name)\n\t\t\t\t\n\t\t\t\tif(!value) {\n\t\t\t\t\t// We don't have a specific value, so we'll say it's checked\n\t\t\t\t\t// if the new value is truthy.\n\t\t\t\t\t\n\t\t\t\t\tif(!newVal || newVal == 'false' || newVal == 'off') {\n\t\t\t\t\t\titem = item.replace(checkedAttrPattern, '')\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// so we should have it checked\n\t\t\t\t\t\tif(!item.match(checkedAttrPattern)) {\n\t\t\t\t\t\t\tif(item.endsWith('/>')) {\n\t\t\t\t\t\t\t\titem = item.slice(0, -2)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\titem = item.slice(0, -1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\titem = item + ' checked=\"checked\" />'  \n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if the above were not true, it's because it's already checked\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!newVal || newVal != value) {\n\t\t\t\t\t\t// if the new value is blank or does not equal the value in\n\t\t\t\t\t\t// in the value attribute, we'll make it unchecked\n\t\t\t\t\t\titem = item.replace(checkedAttrPattern, '')\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// so we should have it checked\n\t\t\t\t\t\tif(!item.match(checkedAttrPattern)) {\n\t\t\t\t\t\t\tif(item.endsWith('/>')) {\n\t\t\t\t\t\t\t\titem = item.slice(0, -2)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\titem = item.slice(0, -1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\titem = item + ' checked=\"checked\" />'  \n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if the above were not true, it's because it's already checked\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult += item\n\t\t\t}\n\t\t\telse if(type === 'checkbox') {\n\t\t\t\tr = item.match(valAttrPattern)\n\t\t\t\tlet value = r ? r[1] : null\n\t\t\t\tlet newVal = fetchValue(values, name)\n\t\t\t\t\n\t\t\t\tif(!value) {\n\t\t\t\t\t// We don't have a specific value, so we'll say it's checked\n\t\t\t\t\t// if the new value is truthy.\n\t\t\t\t\t\n\t\t\t\t\tif(!newVal || isOrContains('false', newVal) || isOrContains('off', newVal)) {\n\t\t\t\t\t\titem = item.replace(checkedAttrPattern, '')\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// so we should have it checked\n\t\t\t\t\t\tif(!item.match(checkedAttrPattern)) {\n\t\t\t\t\t\t\tif(item.endsWith('/>')) {\n\t\t\t\t\t\t\t\titem = item.slice(0, -2)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\titem = item.slice(0, -1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\titem = item + ' checked=\"checked\" />'  \n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if the above were not true, it's because it's already checked\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!newVal || !isOrContains(value, newVal)) {\n\t\t\t\t\t\t// if the new value is blank or does not equal the value in\n\t\t\t\t\t\t// in the value attribute, we'll make it unchecked\n\t\t\t\t\t\titem = item.replace(checkedAttrPattern, '')\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// so we should have it checked\n\t\t\t\t\t\tif(!item.match(checkedAttrPattern)) {\n\t\t\t\t\t\t\tif(item.endsWith('/>')) {\n\t\t\t\t\t\t\t\titem = item.slice(0, -2)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\titem = item.slice(0, -1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\titem = item + ' checked=\"checked\" />'  \n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if the above were not true, it's because it's already checked\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult += item\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult += item\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\tresult += item\n\t\t}\n\t})\n\t\n\treturn result\n}\n\n\nmodule.exports = injectValues\n","export default \".dialog-frame {\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tz-index: 11000;\\n\\topacity: 0;\\n\\ttransition: opacity .3s;\\n\\toverflow: hidden;\\n\\t\\n\\t\\n\\tdisplay: grid;\\n\\tjustify-content: center;\\n\\talign-content: center;\\n\\tpadding: 5vh 5%;\\n}\\n\\n.dialog-frame.open {\\n\\topacity: 1;\\n}\\n\\n.dialog-frame .mask {\\n\\tposition: absolute;\\n\\tbox-sizing: border-box;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbackground-color: #333333;\\n\\topacity: .7;\\n\\theight: 100%;\\n\\tz-index: 0;\\n\\t\\n}\\n\\n\\n.dialog-frame .the-dialog {\\n\\tposition: relative;\\n\\tdisplay: inline-block;\\n\\tz-index: 1;\\n\\tborder-radius: 5px;\\n\\tbackground-color: white;\\n\\toverflow: hidden;\\n\\ttransform: scale(.84);\\n\\ttransition: transform 0.262s cubic-bezier(.77,-1.72,.08,1);\\n}\\n\\n.dialog-frame.open .the-dialog {\\n\\ttransform: scale(1);\\n}\\n\\n.dialog-frame .the-dialog .close {\\n\\tposition: absolute;\\n\\ttop: 0px;\\n\\tright: 0px;\\n\\tpadding: 8px 10px 10px 10px;\\n\\tcursor: pointer;\\n}\\n\\n.dialog-frame .the-dialog .head {\\n\\tborder-bottom: solid #aaaaaa 1px;\\n\\tline-height: 2em;\\n\\tpadding: 0 10px;\\n}\\n\\n.dialog-frame .the-dialog .body {\\n\\tbox-sizing: border-box;\\n\\tpadding: 20px;\\n\\toverflow: auto;\\n\\tmax-height: calc(90vh - 75px);\\n}\\n\\n.dialog-frame .the-dialog .foot {\\n\\tborder-top: solid #aaaaaa 1px;\\n\\tpadding: 10px;\\n}\\n\\n.dialog-frame .the-dialog .foot button {\\n\\tmargin-right: 15px;\\n}\";","const {\n\tevalFunction\n\t, attributeEscapes\n\t, fetchValue\n\t, isOrContains\n\t, escForRegex\n\t, escapeAttributeValue\n} = require('value-injector-common')\n\n\n\nlet nameAttrPattern = /\\sname=[\"'](.*?)[\"']/i\nlet valAttrPattern = /\\svalue=[\"'](.*?)[\"']/i\nlet typeAttrPattern = /\\stype=[\"'](.*?)[\"']/i\nlet selectPattern = /(<select[\\w\\W]*?select\\w*>)/im\nlet selectedAttrPattern = /\\sselected(=[\"'](.*?)[\"'])?/i\n\n\nlet injectValues = function(text, values) {\n\t\n\tlet result = ''\n\t\n\ttext.split(selectPattern).forEach((item) => {\n\t\tif(item.toLowerCase().indexOf('<select') == 0) {\n\t\t\tlet r = item.match(nameAttrPattern)\n\t\t\tlet name = r ? r[1] : null\n\t\t\t\n\t\t\tlet newVal = fetchValue(values, name)\n\t\t\tif(typeof newVal != 'undefined' && newVal !== null) {\n\t\t\t\titem = item.replace(selectedAttrPattern, '')\n\t\t\t\tlet optionMatch = item.match( new RegExp('value=[\"\\']' + escForRegex(newVal) + '[\"\\']', 'i'))\n\t\t\t\tif(optionMatch) {\n\t\t\t\t\tlet breakIndex = item.indexOf(optionMatch[0]) + optionMatch[0].length\n\t\t\t\t\titem = item.slice(0, breakIndex) + ' selected=\"selected\" ' + item.substring(breakIndex)\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult += item\n\t\t}\n\t\telse {\n\t\t\tresult += item\n\t\t}\n\t})\n\t\n\treturn result\n}\n\n\nmodule.exports = injectValues\n","const {\n\tevalFunction\n\t, attributeEscapes\n\t, fetchValue\n\t, isOrContains\n\t, escForRegex\n\t, escapeAttributeValue\n} = require('value-injector-common')\n\n\nlet nameAttrPattern = /\\sname=[\"'](.*?)[\"']/i\nlet valAttrPattern = /\\svalue=[\"'](.*?)[\"']/i\nlet typeAttrPattern = /\\stype=[\"'](.*?)[\"']/i\nlet textareaPattern = /(<textarea[\\w\\W]*?textarea\\w*>)/im\nlet selectedAttrPattern = /\\sselected(=[\"'](.*?)[\"'])?/i\n\n\nlet injectValues = function(text, values) {\n\t\n\tlet result = ''\n\t\n\ttext.split(textareaPattern).forEach((item) => {\n\t\tif(item.toLowerCase().indexOf('<textarea') == 0) {\n\t\t\tlet r = item.match(nameAttrPattern)\n\t\t\tlet name = r ? r[1] : null\n\t\t\t\n\t\t\tif(name) {\n\t\t\t\tlet newVal = fetchValue(values, name)\n\t\t\t\tif(typeof newVal != 'undefined' && newVal !== null) {\n\t\t\t\t\tlet startTagEnd = item.indexOf('>')\n\t\t\t\t\tlet endTagStart = item.lastIndexOf('<')\n\t\t\t\t\titem = item.substring(0, startTagEnd + 1) + newVal + item.substring(endTagStart)\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult += item\n\t\t}\n\t\telse {\n\t\t\tresult += item\n\t\t}\n\t})\n\t\n\treturn result\n}\n\n\nmodule.exports = injectValues","\nlet attributeEscapes = {\n\t'&': '&amp;'\n\t, '\"': '&quot;'\n\t, '<': '&lt;'\n}\n\nlet evalFunction = new Function('data',\n\t`with (data.context) {\n\t\ttry {\n\t\t\treturn eval(data.expression);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}`\n)\n\nfunction fetchValue(obj, path) {\n\tif(typeof obj === 'null' || typeof obj === 'undefined') {\n\t\treturn null\n\t}\n\treturn evalFunction.call(this, {\n\t\tcontext: obj\n\t\t, expression: path\n\t})\n}\n\n\nfunction isOrContains(target, possible) {\n\tif(Array.isArray(possible)) {\n\t\treturn possible.includes(target)\n\t}\n\telse {\n\t\treturn target == possible\n\t}\n}\n\nfunction escForRegex(val) {\n\tif(val && val.replace) {\n\t\treturn val.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n\t}\n\telse {\n\t\treturn val;\n\t}\n}\n\nfunction escapeAttributeValue(attr) {\n\tif(attr === null || attr === undefined) {\n\t\tattr = ''\n\t}\n\tif(typeof attr !== 'string') {\n\t\tattr = '' + attr\n\t}\n\tfor(let [key, value] of Object.entries(attributeEscapes)) {\n\t\tattr = attr.split(key).join(value)\n\t}\n\treturn attr\n}\n\n\nmodule.exports = {\n\tevalFunction\n\t, attributeEscapes\n\t, fetchValue\n\t, isOrContains\n\t, escForRegex\n\t, escapeAttributeValue\n}\n","export default function generateStyles() {\n\nreturn `\n<style>\n.object-list-view-list {\n\tpadding: 0;\n}\n.object-list-view-list li {\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr;\n\tcolumn-gap: 30px;\n\tbackground-color: #f8f8f8;\n\tpadding: 10px;\n\tmargin-bottom: 10px;\n}\n.object-list-view-list li .actions a {\n\tdisplay: block;\n\tcursor: pointer;\n\ttext-decoration: none;\n}\n</style>\n`\n}","import { View } from '@webhandle/backbone-view'\nimport ListView from '@webhandle/drag-sortable-list'\nimport FormAnswerDialog from '@webhandle/form-answer-dialog'\nimport generateStyles from './generate-styles.mjs'\nimport renderTile from './render-tile.mjs'\n\n\nexport default class ObjectListView extends View {\n\tconstructor(options) {\n\t\tsuper(options)\n\t\tthis.listClass = options.listClass || 'object-list-view-list'\n\t\tthis.listItemClass = options.listItemClass || 'tile'\n\t\tif ('renderStyles' in options) {\n\t\t\tthis.renderStyles = options.renderStyles\n\t\t}\n\t\telse {\n\t\t\tthis.renderStyles = true\n\t\t}\n\t\t\n\t\tthis.dataAttributeName = options.dataAttributeName || 'data-serialized'\n\t}\n\n\tpreinitialize() {\n\t\tthis.events = {\n\t\t\t'click .delete': 'deleteClicked'\n\t\t\t, 'click .edit': 'editClicked'\n\t\t\t, 'click .add-item': 'addClicked'\n\t\t}\n\t}\n\t\n\trenderTileDetails(data) {\n\t\treturn `${data.name}`\n\t}\n\t\n\trenderEditForm(data) {\n\t\treturn ''\n\t}\n\n\tasync getData() {\n\t\tlet value = this.input.value\n\t\tif (!value) {\n\t\t\treturn []\n\t\t}\n\t\treturn JSON.parse(value) || []\n\t}\n\t\n\tasync setData(data) {\n\t\tthis.input.value = data\n\t}\n\n\tasync updateData() {\n\t\tlet result = []\n\t\tlet items = this.el.querySelectorAll('.' + this.listItemClass)\n\t\tfor (let item of items) {\n\t\t\tresult.push(JSON.parse(item.getAttribute(this.dataAttributeName)))\n\t\t}\n\t\treturn this.setData(JSON.stringify(result))\n\t}\n\t\n\tgenerateButtonRow(additionalClasses) {\n\t\treturn `<div class=\"button-row ${additionalClasses || ''}\"><a href=\"#\" class=\"add-item\">Add</a></div>`\n\t}\n\n\tasync render() {\n\t\tlet content = ''\n\t\tif (this.renderStyles) {\n\t\t\tcontent += this.generateStyles()\n\t\t}\n\t\t\n\t\tcontent += this.generateButtonRow(this.additionalButtonRowClasses)\n\n\t\tcontent += `<ul class=\"${this.listClass}\">`\n\t\tfor (let dat of (await this.getData())) {\n\t\t\tcontent += this.renderTile(dat)\n\t\t}\n\t\tcontent += '</ul>'\n\t\t\n\t\tcontent += this.generateButtonRow()\n\t\t\n\t\tthis.el.innerHTML = content\n\n\t\tlet elList = this.el.querySelector('ul')\n\t\tlet itemsList = new ListView({\n\t\t\tel: elList\n\t\t\t, createCellsForFiles(files) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\t, createCellsForUriList(files) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t})\n\t\titemsList.render()\n\t\tthis.itemsList = itemsList\n\t\tthis.itemsList.emitter.on('list-change', (evt) => {\n\t\t\tthis.updateData()\n\t\t})\n\n\t\treturn this\n\t}\n\n\tdeleteClicked(evt, selected) {\n\t\tevt.preventDefault()\n\t\tlet answer = confirm('Please confirm that you want to delete this item?')\n\t\tif(answer) {\n\t\t\tselected.closest('.' + this.listItemClass).remove()\n\t\t\tthis.updateData()\n\t\t}\n\t}\n\n\tasync editClicked(evt, selected) {\n\t\tevt.preventDefault()\n\t\tlet li = selected.closest('.' + this.listItemClass)\n\t\tlet data = JSON.parse(li.getAttribute(this.dataAttributeName))\n\t\tlet dialog = new FormAnswerDialog({\n\t\t\tdata: data\n\t\t\t, title: 'Edit'\n\t\t\t, body: this.stringifyEditForm(data)\n\t\t\t, afterOpen: this.afterOpen\n\t\t})\n\n\t\tlet info = await dialog.open()\n\n\t\tif(info) {\n\t\t\tli.querySelector('.details').innerHTML = this.renderTileDetails(info)\t\n\t\t\tli.setAttribute(this.dataAttributeName, JSON.stringify(info))\n\t\t\tthis.updateData()\n\t\t}\n\t}\n\n\tasync addClicked(evt, selected) {\n\t\tevt.preventDefault()\n\t\tlet dialog = new FormAnswerDialog({\n\t\t\ttitle: 'Add'\n\t\t\t, body: this.stringifyEditForm()\n\t\t\t, afterOpen: this.afterOpen\n\t\t})\n\n\t\tlet info = await dialog.open()\n\t\t\n\t\tif(info) {\n\t\t\tlet html = this.renderTile(info)\n\t\t\tlet ul = this.el.querySelector('.' + this.listClass)\n\t\t\tul.insertAdjacentHTML('beforeend', html)\n\t\t\tthis.updateData()\n\t\t}\n\t}\n\t\n\tstringifyEditForm(data) {\n\t\tif(typeof this.renderEditForm === 'string') {\n\t\t\treturn this.renderEditForm\n\t\t}\n\t\treturn this.renderEditForm(data)\n\t}\n}\n\nObjectListView.prototype.generateStyles = generateStyles\nObjectListView.prototype.renderTile = renderTile\n","import escapeAttributeValue from '@dankolz/escape-html-attribute-value'\n\nexport default function renderTile(data) {\n\nreturn `<li class=\"${this.listItemClass || 'tile'}\"  data-serialized=\"${escapeAttributeValue(JSON.stringify(data))}\" draggable=\"true\" style=\"touch-action: none;\">\n\t<div class=\"actions\">\n\t\t<a class=\"edit\">e</a>\n\t\t<a class=\"delete\" >&times;</a>\n\t\t<!-- <a class=\"move\" href=\"#\">&#8597;</a> -->\n\t\t\n\t</div>\n\t<div class=\"details\">\n\t\t${this.renderTileDetails(data)}\n\t</div>\n</li>\n\t`\n}","export default function eventEntryMapper([key, value]) {\n\tkey = key.trim()\n\tlet parts = key.split(' ')\n\tlet event = parts.shift().trim()\n\tlet selector = parts.join(' ').trim()\n\t\n\tif(typeof value === 'string') {\n\t\tvalue = value.trim()\n\t}\t\n\t\n\treturn {\n\t\tevent: event,\n\t\tselector: selector,\n\t\thandler: value\n\t}\n}","export default function extractEventNames(eventTriggers) {\n\tlet eventNames = Array.from(eventTriggers.reduce((acc, trigger) => {\n\t\tacc.add(trigger.event)\n\t\treturn acc\n\t}, new Set()))\n\treturn eventNames\n}","/**\n * Generates a random string id in the browser. Will probably not work\n * on the server.\n * @returns A base64 web url safe string\n */\nexport default function generateId() {\n\tlet array = new Uint8Array(32)\n\twindow.crypto.getRandomValues(array)\n\tlet value = btoa(array)\n\tvalue = value.replace(/\\//g, \"_\").replace(/\\+/g, \"-\").replace(/=+$/, \"\")\n\treturn value\n}","\nimport {View} from \"./view.js\"\nexport {\n\tView\n}","import generateId from \"./generate-id.js\"\n// import pick from \"./pick.js\"\nimport eventEntryMapper from \"./event-entry-mapper.js\"\nimport extractEventNames from \"./extract-event-names.js\"\n\nlet defaultOptions = {\n\t// The default `tagName` of a View's element is `\"div\"`.\n\ttagName: 'div'\n\t\n\t, events: {}\n\n}\nlet viewOptions = ['model', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n/**\n * A way to connect data to be displayed, a way to display it, and an organization\n * of functions to handle events.\n */\nexport class View {\n\tconstructor(options) {\n\t\tthis.id = generateId()\n\t\tObject.assign(this, defaultOptions)\n\t\tthis.preinitialize.apply(this, arguments);\n\t\tObject.assign(this, options)\n\t\tthis._ensureElement()\n\t\tthis.initialize.apply(this, arguments);\n\t}\n\n\n\t/**\n\t * preinitialize is an empty function by default. You can override it with a function\n\t * or object.  preinitialize will run before any instantiation logic is run in the View\n\t */\n\tpreinitialize() { }\n\n\t/**\n\t * Initialize is an empty function by default. Override it with your own\n\t * initialization logic.\n\t */\n\tinitialize() { }\n\n\t/**\n\t * **render** is the core function that your view should override, in order\n\t * to populate its element (`this.el`), with the appropriate HTML. The\n\t * convention is for **render** to always return `this`.\n\t * @returns this\n\t */\n\trender() {\n\t\treturn this\n\t}\n\t\n\t/**\n\t * Removes the element from the dom. Does not disable event listeners\n\t */\n\tremove() {\n\t\tthis.el.parentElement.removeChild(this.el)\n\t}\n\t\n\t/**\n\t * Adds this view as a child to a containing element. Nothing special is going on here.\n\t * This is just a shortcut for container.appendChild\n\t * @param {Element} container \n\t */\n\tappendTo(container) {\n\t\tcontainer.appendChild(this.el)\n\t}\n\n\t/**\n\t * Clears the contents of the container and adds this view.\n\t * @param {Element} container \n\t */\n\treplaceContentsOf(container) {\n\t\tcontainer.innerHTML = ''\n\t\tthis.appendTo(container)\n\t}\n\n\t/**\n\t * Set the element for this view, and if new, adds listeners to it in accordance\n\t * with the \"events\" member.\n\t * @param {Element} el The dom element which will be the root of this view\n\t * @returns this\n\t */\n\tsetElement(el) {\n\t\tif (this.el !== el) {\n\t\t\tthis.el = el\n\t\t\tthis._addListeners()\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Produces a DOM element to be assigned to your view. Exposed for\n\t * subclasses using an alternative DOM manipulation API.\n\t * @param {string} name The element tag name\n\t * @returns The dom element\n\t */\n\t_createElement(name) {\n\t\tlet el = document.createElement(name)\n\t\tel.setAttribute('id', this.id)\n\t\tel.view = this\n\t\treturn el\n\t}\n\n\t/**\n\t * Ensures that the element exists. Applies attributes and className\n\t * to it regardless\n\t */\n\t_ensureElement() {\n\t\tif (!this.el) {\n\t\t\tthis.setElement(this._createElement(this.tagName))\n\t\t}\n\t\telse {\n\t\t\tthis._addListeners()\n\t\t}\n\t\tthis._setAttributes()\n\t\tif (this.className) {\n\t\t\tthis.el.classList.add(this.className)\n\t\t}\n\t}\n\n\t/**\n\t * Set attributes from a hash on this view's element.  Exposed for\n\t * subclasses using an alternative DOM manipulation API.\n\t * @param {object} attributes \n\t */\n\t_setAttributes(attributes) {\n\t\tif (this.attributes) {\n\t\t\tfor (let [key, value] of Object.entries(this.attributes)) {\n\t\t\t\tthis.el.setAttribute(key, value)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * Set callbacks, where `this.events` is a hash of\n\t * *{\"event selector\": \"callback\"}*\n\t *\n\t *    {\n\t *       'mousedown .title':  'edit',\n\t *       'click .button':     'save',\n\t *       'click .open':       function(e) { ... },\n\t *       'keydown .':     \t  'handleKey'\n\t *    }\n\t * pairs. Callbacks will be bound to the view, with `this` set properly.\n\t * \n\t * \n\t * Note that the selector `.` will match the root element and can be used\n\t * as a final chance to handle events or for events like an escape key\n\t * which are essentially global to the widget.\n\t * \n\t */\n\t_addListeners() {\n\t\tthis.eventTriggers = Object.entries(this.events).map(eventEntryMapper)\n\t\tlet eventNames = extractEventNames(this.eventTriggers)\t\t\n\n\t\tfor(let eventName of eventNames) {\n\t\t\tthis.el.addEventListener(eventName, this._eventHandler.bind(this))\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the elements from the view which match the selector\n\t * @param {string} selector A css selector. `.` will select the root element\n\t * @returns An array of elements\n\t */\n\t_getCandidates(selector) {\n\t\tif(selector === '.') {\n\t\t\treturn [this.el]\n\t\t}\n\t\treturn Array.from(this.el.querySelectorAll(selector))\n\t}\n\t\n\t/**\n\t * Handles all events for all elements within the view. It attempts to find a\n\t * trigger matching the event and then process it. It will match and invoke\n\t * only one trigger.\n\t * @param {Event} evt \n\t */\n\t_eventHandler(evt) {\n\t\tfor(let trigger of this.eventTriggers) {\n\t\t\tif(evt.type == trigger.event) {\n\t\t\t\tlet candidates = this._getCandidates(trigger.selector)\n\t\t\t\tlet found = null\n\t\t\t\tfor(let candidate of candidates) {\n\t\t\t\t\tif(candidate === evt.target || candidate.contains(evt.target)) {\n\t\t\t\t\t\tfound = candidate\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(found) {\n\t\t\t\t\tif(typeof trigger.handler === 'string') {\n\t\t\t\t\t\tthis[trigger.handler].call(this, evt, found)\n\t\t\t\t\t}\t\n\t\t\t\t\telse if(typeof trigger.handler === 'function') {\n\t\t\t\t\t\ttrigger.handler.call(this, evt, found)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","\nexport default class DataItemWorker {\n\n\tasync getFileFromEntry(entry) {\n\t\tlet p = new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tif (entry.file) {\n\t\t\t\t\tentry.file(file => {\n\t\t\t\t\t\tfile.entry = entry\n\t\t\t\t\t\tresolve(file)\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\tconsole.error(err)\n\t\t\t\t\t\tresolve(null)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresolve(null)\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tconsole.error(e)\n\t\t\t\tresolve(null)\n\t\t\t}\n\t\t})\n\t\treturn p\n\t}\n\n\tasync readDirectoryEntries(entry) {\n\t\tlet p = new Promise((resolve, reject) => {\n\t\t\tlet dirReader = entry.createReader()\n\t\t\tlet result = []\n\t\t\tlet readThem = () => {\n\t\t\t\tdirReader.readEntries(async (entries) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif(entries && entries.length > 0) {\n\t\t\t\t\t\t\tfor (let entry of entries) {\n\t\t\t\t\t\t\t\tresult.push(entry)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadThem()\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tresolve(result)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\tconsole.error(e)\n\t\t\t\t\t\tresolve(result)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treadThem()\n\t\t})\n\t\treturn p\n\t}\n\n\t/**\n\t * \n\t * Takes a list of DataTransferItems and resolves them to FileEntry objects.\n\t * \n\t * Note, you can get a real File object by calling `getFileFromEntry`\n\t * @param {array[DataTransferItem|File|FileEntry|DirectoryEntry]} entries \n\t * @param {*} [options]\n\t * @returns \n\t */\n\tasync expandEntries(entries, options) {\n\t\toptions = Object.assign({\n\t\t\tkeepDirectories: false\n\t\t\t, recursive: true\n\t\t}, options)\n\t\tlet expanded = []\n\t\tlet target = [...entries]\t\n\t\t\n\t\twhile(target.length > 0) {\n\t\t\t\n\t\t\t// You MUST process all of the DataTransferItems first. If you do a directory read\n\t\t\t// it will blank out the information on those items.\n\t\t\tlet item = target.shift()\n\t\t\t\n\t\t\tif(item instanceof File) {\n\t\t\t\texpanded.push(item)\n\t\t\t}\n\t\t\telse if(item.isFile === true && item.isDirectory === false) {\n\t\t\t\texpanded.push(item)\n\t\t\t}\n\t\t\telse if(item.isFile === false && item.isDirectory === true) {\n\t\t\t\tlet dirEntries = await this.readDirectoryEntries(item)\n\t\t\t\tif(options.recursive) {\n\t\t\t\t\ttarget.push(...dirEntries)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(!options.keepDirectories) {\n\t\t\t\t\t\tdirEntries = dirEntries.filter(item => item.isFile)\n\t\t\t\t\t}\n\t\t\t\t\texpanded.push(...dirEntries)\n\t\t\t\t}\n\t\t\t\tif(options.keepDirectories) {\n\t\t\t\t\texpanded.push(item)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (item.kind === \"file\") {\n\t\t\t\tif (item.webkitGetAsEntry) {\n\t\t\t\t\tlet entry = item.webkitGetAsEntry()\n\t\t\t\t\tif (entry) {\n\t\t\t\t\t\ttarget.push(entry)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(item.getAsFile) {\n\t\t\t\t\ttarget.push(item.getAsFile())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\texpanded = expanded.filter(item => !!item)\n\t\treturn expanded\n\t}\n\n\t/**\n\t * A utility function to extract the file entries from a file drop event.\n\t * @param {Event} evt \n\t * @returns \n\t */\n\tasync getFileEntriesFromEvent(evt, options) {\n\t\tlet entries = []\n\t\t// items is the new interface we should use if that's available\n\t\tif (evt.dataTransfer.items) {\n\t\t\tentries.push(...evt.dataTransfer.items)\n\t\t} \n\t\telse if(evt.dataTransfer.files) {\n\t\t\tentries.push(...evt.dataTransfer.files)\n\t\t}\n\t\tlet result = await this.expandEntries(entries, options)\n\t\treturn result.filter(item => !!item)\n\t}\n\n\n}","import { View } from '@webhandle/backbone-view'\nimport Emitter from '@webhandle/minimal-browser-event-emitter'\nimport DataItemWorker from './data-item-worker.mjs'\n\nlet dataItemWorker = new DataItemWorker()\n\nexport default class ListView extends View {\n\n\t/**\n\t * Setup the event listners and default objects.\n\t * @param {Object} options \n\t */\n\tpreinitialize(options = {}) {\n\t\tthis.desktopHandleSelector = options.desktopHandleSelector\n\t\tthis.mobileHandleSelector = options.mobileHandleSelector || '.handle'\n\t\tthis.events = Object.assign({}, {\n\t\t\t'drop .': 'handleDrop'\n\t\t\t, 'dragend .': 'handleDragEnd'\n\t\t\t, 'dragleave .': 'handleDragLeave'\n\t\t\t, 'dragover .': 'handleDragover'\n\t\t\t, 'dragenter .': 'dragEnter'\n\t\t\t, 'dragover *': 'dragEnterCell'\n\t\t\t, 'dragstart *': 'dragStart'\n\t\t\t, ['touchstart ' + this.mobileHandleSelector]: 'touchDrag'\n\t\t\t, ['touchmove ' + this.mobileHandleSelector]: 'touchMove'\n\t\t\t, ['touchend ' + this.mobileHandleSelector]: 'touchEnd'\n\t\t\t, ['touchcancel ' + this.mobileHandleSelector]: 'touchCancel'\n\t\t}, options.events)\n\t\tthis.placeholderName = options.placeholderName || 'New Item'\n\t\toptions.events = this.events\n\t\tif (!this.emitter) {\n\t\t\tthis.emitter = new Emitter()\n\t\t}\n\t\tthis.overscrollCaptures = {}\n\t}\n\n\t/**\n\t * Returns true if a file is being dragged into the list.\n\t * @param {Event} evt \n\t * @returns \n\t */\n\tisFileTypeDrag(evt) {\n\t\tif (evt.dataTransfer && evt.dataTransfer.item && evt.dataTransfer.item.length > 0) {\n\t\t\tif (evt.dataTransfer.items[0].kind === 'file') {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\tif (evt.dataTransfer && evt.dataTransfer.types) {\n\t\t\tfor (let type of evt.dataTransfer.types) {\n\t\t\t\tif (type.toLowerCase() == 'files') {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\t/**\n\t * Looks to see if there's a resource label and we should therefore consider this an\n\t * external resource object that's being dragged into the list.\n\t * @param {Event} evt \n\t * @returns \n\t */\n\tisResourceTypeDrag(evt) {\n\t\treturn !!this.extractLabel(evt)\n\t}\n\n\t/**\n\t * Watches for entry of dragging into a cell so we can tell of the user is still\n\t * performing a drag operation.\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\tdragEnterCell(evt, selected) {\n\t\tthis.canCancel = false\n\t}\n\n\t/**\n\t * Watch for the end of dragging for one of the existing cells. This is the cleanup\n\t * for the case where a user is dragging and then presses escape.\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\thandleDragEnd(evt, selected) {\n\t\tthis.cleanupDrag()\n\t}\n\n\t/**\n\t * Watches for the mouse leaving the list area. The spec has no good way to tell if the user\n\t * has stopped dragging within our control area, so here we're doing a little dance to watch\n\t * when the user leaves any of the top level elements and then perform a cancel if we don't\n\t * see another drag event within a few milliseconds.\n\t * \n\t * This does sometimes lead to false positives, but that's generally okay since the code just\n\t * interprets the next drag event as if the user just started their drag, so it recovers \n\t * fairly well.\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\thandleDragLeave(evt, selected) {\n\t\tif (this.externalDrag) {\n\t\t\tif (evt.target == this.el || this.getCells().includes(evt.target)) {\n\t\t\t\t// so we're leaving the whole list. If we don't immediately enter someplace else\n\t\t\t\t// then we should interpret this as a cancel\n\t\t\t\t// In this case, \"the whole list\" is one of the cells or the container\n\t\t\t\tthis.canCancel = true\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (this.canCancel) {\n\t\t\t\t\t\tthis.cleanupDrag()\n\t\t\t\t\t}\n\t\t\t\t}, 20)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if this is a type of object from outside the list that can be added\n\t * to the list. By default it allows files and uri-list types. To turn off the abilty\n\t * to drag other items into the list, just override to return false.\n\t * @param {Event} evt \n\t * @returns \n\t */\n\tshouldInsertCellForExternalDrag(evt) {\n\t\treturn this.isFileTypeDrag(evt) || this.isResourceTypeDrag(evt)\n\t}\n\n\n\t/**\n\t * This is the mobile/touch equivalent of dragStart\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\ttouchDrag(evt, selected) {\n\t\tthis.captureOverscroll('html')\n\t\tthis.captureOverscroll('body')\n\t\tthis.dragStart(evt, selected)\n\t}\n\n\t/**\n\t * Handle the user touch dragging an item.\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\ttouchMove(evt, selected) {\n\t\tlet top = this.boxTop()\n\t\tlet pos = Math.max(0, evt.touches[0].pageY) - top\n\t\tthis.positionOnDrag(pos)\n\t}\n\n\t/**\n\t * This is essentially a mobile/touch drop\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\ttouchEnd(evt, selected) {\n\t\tthis.handleDrop(evt, selected)\n\t}\n\n\t/**\n\t * Cleanup after a mobile drag\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\ttouchCancel(evt, selected) {\n\t\tthis.cleanupDrag()\n\t}\n\n\t/**\n\t * Listens for the element being dragged. The spec seems to indicate that this is\n\t * fired on mobile as well, but in practice is seems to only get fired on \n\t * desktop.\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\tdragStart(evt, selected) {\n\t\tthis.dragging = this.getCellFromChild(selected)\n\t\tthis.dragging.classList.add('dragging')\n\t\tif (evt.dataTransfer) {\n\t\t\tevt.dataTransfer.setDragImage(document.createElement('div'), 0, 0)\n\t\t}\n\t}\n\n\t/**\n\t * Extracts a placeholder label from the data transfer types. The label name is\n\t * part of the type name. So, a type of `data:text/label,awesome` would indicate\n\t * that the placeholder is supposed to be `awesome`.\n\t * @param {Event} evt \n\t * @returns \n\t */\n\textractLabel(evt) {\n\t\tlet labelPrefix = 'data:text/label,'\n\t\tfor (let type of evt.dataTransfer.types) {\n\t\t\tif (type.indexOf(labelPrefix) == 0) {\n\t\t\t\treturn type.substring(labelPrefix.length)\n\t\t\t}\n\t\t}\n\n\t\treturn null\n\t}\n\n\t/**\n\t * Restores the elements previous overscroll behavior (see captureOverscroll for why we need\n\t * this)\n\t * @param {string} elName \n\t */\n\trestoreOverscroll(elName) {\n\t\tif (elName in this.overscrollCaptures) {\n\t\t\tdocument.querySelector(elName).style['overscroll-behavior'] = this.overscrollCaptures[elName]\n\t\t\tdelete this.overscrollCaptures[elName]\n\t\t}\n\t}\n\n\t/**\n\t * Used for mobile to get the present value of what happens when the user drags their finger\n\t * farther than the screen can scroll. By default what happens is a page reload. That won't \n\t * be what we want if a user is dragging a list item, so we have to capture that behavior and\n\t * change it so that nothing happens to the page.\n\t * @param {string} elName \n\t */\n\tcaptureOverscroll(elName) {\n\t\tlet el = document.querySelector(elName)\n\t\tthis.overscrollCaptures[elName] = el.style['overscroll-behavior']\n\t\tel.style['overscroll-behavior'] = 'none'\n\t}\n\n\t/**\n\t * Utility function to create a dom node based on html\n\t * @param {string} html \n\t * @returns \n\t */\n\t_makeElementFromHTML(html) {\n\t\tlet div = document.createElement('div')\n\t\tdiv.innerHTML = html\n\t\tlet child = div.children[0]\n\t\treturn child\n\t}\n\n\n\t/**\n\t * Creates markup for the external drag event placeholder cell. Attempts\n\t * to determine a reasonable label.\n\t * @param {Event} evt \n\t * @returns \n\t */\n\tcreateExternalDragPlaceholderHTML(evt) {\n\t\tlet placeholder = this.extractLabel(evt) || this.placeholderName\n\t\tlet html = `<div class=\"cell\">\n\t\t\t<span class=\"handle\">↕</span>\n\t\t\t${placeholder}\n\t\t</div>`\n\t\treturn html\n\n\t}\n\n\t/**\n\t * Creates a placeholder cell for a drag event where the source is an\n\t * external object like a file or something else on the page.\n\t * @param {Event} evt \n\t */\n\tcreateExternalDragPlaceholderCell(evt) {\n\t\tlet html = this.createExternalDragPlaceholderHTML(evt)\n\t\tlet cell = this._makeElementFromHTML(html)\n\t\tcell.setAttribute('draggable', true)\n\t\tthis.addCell(cell)\n\t\tthis.dragStart(evt, cell)\n\t}\n\n\tdragEnter(evt, selected) {\n\t\tif (!this.dragging && this.shouldInsertCellForExternalDrag(evt)) {\n\t\t\t// If we're not already doing a drag operation, we need to start one\n\t\t\t// We create a placeholder for this event and then move it up and down\n\t\t\t// like a pre-existing cell. \n\t\t\t// NOTE: We do not have much information about the contents of the\n\t\t\t// drag until the drop event occurs. This placeholder may have to be\n\t\t\t// somewhat generic.\n\t\t\tthis.externalDrag = true\n\t\t\tthis.createExternalDragPlaceholderCell(evt)\n\t\t}\n\t}\n\n\t/**\n\t * Watch for movement of something being dragged\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\thandleDragover(evt, selected) {\n\t\tevt.preventDefault()\n\t\tthis.canCancel = false\n\t\tlet top = this.boxTop()\n\t\tlet pos = evt.y - top\n\n\t\tif (this.dragging) {\n\t\t\tif (evt.dataTransfer) {\n\t\t\t\tevt.dataTransfer.dropEffect = 'move'\n\t\t\t}\n\t\t\tthis.positionOnDrag(pos)\n\t\t}\n\t\telse {\n\t\t\tif (evt.dataTransfer) {\n\t\t\t\tevt.dataTransfer.dropEffect = 'copy'\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates permanent cells for files dropped into the list\n\t * @param {array[FileEntry|File]} files \n\t * @returns an array of Elements\n\t */\n\tcreateCellsForFiles(files) {\n\t\tlet cells = files.map(file => {\n\t\t\tlet html = `<div class=\"cell\">\n\t\t\t\t<span class=\"handle\">↕</span>\n\t\t\t\t${file.name}\n\t\t\t</div>`\n\t\t\tlet el = this._makeElementFromHTML(html)\n\t\t\tel.data = file\n\t\t\treturn el\n\t\t})\n\t\treturn cells\n\t}\n\n\t/**\n\t * Creates permanent cells for resource objects dropped into the list\n\t * @param {array[string]} uriList \n\t * @returns an array of Elements\n\t */\n\tcreateCellsForUriList(uriList) {\n\t\tif (!Array.isArray(uriList)) {\n\t\t\turiList = [uriList]\n\t\t}\n\t\tlet cells = uriList.map(uri => {\n\t\t\tlet html = `<div class=\"cell\">\n\t\t\t\t<span class=\"handle\">↕</span>\n\t\t\t\t${uri}\n\t\t\t</div>`\n\t\t\tlet el = this._makeElementFromHTML(html)\n\t\t\tel.data = uri\n\t\t\treturn el\n\t\t})\n\t\treturn cells\n\t}\n\n\t/**\n\t * Creates permanent cells for drops of unknown types.\n\t * @param {Event} evt \n\t * @returns An array of elements\n\t */\n\tcreateCellsForUnknownType(evt) {\n\t\treturn []\n\t}\n\t\n\tisExternalDrop(evt) {\n\t\tlet uriList\n\t\tif (evt.dataTransfer) {\n\t\t\turiList = evt.dataTransfer.getData('text/uri-list')\n\t\t}\n\n\t\tif (this.externalDrag || uriList) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\t\n\tasync getFilesEntries(evt) {\n\t\tlet files = await dataItemWorker.getFileEntriesFromEvent(evt, {\n\t\t\tkeepDirectories: false\n\t\t\t, recursive: true\n\t\t})\n\t\treturn files\n\t}\n\n\t/**\n\t * Creates permanent cells for external items dropped into the list,\n\t * emits events, and does cleaup\n\t * @param {Event} evt \n\t * @param {Element} selected \n\t */\n\thandleDrop(evt, selected) {\n\t\tevt.preventDefault()\n\t\t\n\t\t// Sometimes the placeholder gets cleaned up before the insertion of the new nodes\n\t\t// happens. Let's capture the following element just in case we need it.\n\t\tlet afterDragElement\n\t\tif(this.dragging) {\n\t\t\tafterDragElement = this.dragging.nextElementSibling\n\t\t}\n\n\t\tlet p = new Promise(async (resolve, reject) => {\n\t\t\tif (this.isExternalDrop(evt)) {\n\t\t\t\t// if a link is dropped, there's no exteralDrag object, just a drop object\n\t\t\t\tlet uriList\n\t\t\t\tif (evt.dataTransfer) {\n\t\t\t\t\turiList = evt.dataTransfer.getData('text/uri-list')\n\t\t\t\t}\n\n\t\t\t\tlet changes = []\n\t\t\t\tlet files = await this.getFilesEntries(evt)\n\t\t\t\tlet cells = []\n\t\t\t\tif (files && files.length > 0) {\n\t\t\t\t\tcells = this.createCellsForFiles(files)\n\t\t\t\t\tfor (let count = 0; count < cells.length; count++) {\n\t\t\t\t\t\tlet cell = cells[count]\n\t\t\t\t\t\tif (!cell.file) {\n\t\t\t\t\t\t\tcell.file = files[count]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (uriList) {\n\t\t\t\t\tif (typeof uriList == 'string') {\n\t\t\t\t\t\t// Acording to the spec, this should be a list with one uri on every line\n\t\t\t\t\t\t// In practice, it seems like the browser is eating the return characters\n\t\t\t\t\t\t// In my tests, I'm passing multiple uris as comma separated. I'm handling\n\t\t\t\t\t\t// both cases here.\n\t\t\t\t\t\tlet parts = [uriList]\n\t\t\t\t\t\tfor (let sep of ['\\r\\n', '\\n', ',']) {\n\t\t\t\t\t\t\tlet newParts = []\n\t\t\t\t\t\t\tfor (let part of parts) {\n\t\t\t\t\t\t\t\tnewParts.push(...part.split(sep))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparts = newParts\n\t\t\t\t\t\t}\n\t\t\t\t\t\turiList = parts\n\t\t\t\t\t}\n\t\t\t\t\tcells = this.createCellsForUriList(uriList)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcells = this.createCellsForUnknownType(evt)\n\t\t\t\t}\n\n\t\t\t\tfor (let cell of cells) {\n\t\t\t\t\tcell.setAttribute('draggable', true)\n\t\t\t\t\tthis.addCell(cell, {\n\t\t\t\t\t\tbefore: this.dragging || afterDragElement\n\t\t\t\t\t})\n\t\t\t\t\tchanges.push({\n\t\t\t\t\t\tcell: cell\n\t\t\t\t\t\t, file: cell.file\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tif (this.dragging) {\n\t\t\t\t\tthis.dragging.remove()\n\t\t\t\t}\n\t\t\t\tthis.emitter.emit('list-change', {\n\t\t\t\t\ttype: 'drop'\n\t\t\t\t\t, cells: cells\n\t\t\t\t\t, files: files\n\t\t\t\t\t, changes: changes\n\t\t\t\t\t, event: evt\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.emitter.emit('list-change', {\n\t\t\t\t\ttype: 'reorder'\n\t\t\t\t\t, cells: [this.dragging]\n\t\t\t\t})\n\t\t\t}\n\n\t\t})\n\t\tthis.cleanupDrag()\n\t\treturn p\n\t}\n\n\t/**\n\t * Adds a new item to the list, last item by default \n\t * @param {string|Element} cell The item to add \n\t * @param {*} [options]\n\t * @param {boolean} options.first If true inserted at the start of the list\n\t * @param {boolean} options.last If true inserted at the end of the list\n\t * @param {Element} options.after Insert after this item \n\t * @param {Element} options.before Insert before this item\n\t * @param {*} options.data Data to be set on the element\n\t */\n\taddCell(cell, options = {}) {\n\t\tif (typeof cell === 'string') {\n\t\t\tcell = this._makeElementFromHTML(cell)\n\t\t}\n\n\t\tif (options.data) {\n\t\t\tcell.data = options.data\n\t\t}\n\n\t\tif (options.first) {\n\t\t\tthis.el.insertAdjacentElement('afterbegin', cell)\n\t\t}\n\t\telse if (options.before) {\n\t\t\tthis.el.insertBefore(cell, options.before)\n\t\t}\n\t\telse if (options.after) {\n\t\t\toptions.after.after(cell)\n\t\t}\n\t\telse {\n\t\t\tthis.el.insertAdjacentElement('beforeend', cell)\n\t\t}\n\t\treturn cell\n\t}\n\n\t/**\n\t * \n\t * @param {int} pos position of pointer relative to the top of the box\n\t */\n\tpositionOnDrag(pos) {\n\t\tlet over = this.findOver(pos)\n\t\tthis.addCell(this.dragging, {\n\t\t\tbefore: over\n\t\t})\n\t}\n\n\t/**\n\t * Gets the top level objects of the list.\n\t * @returns \n\t */\n\tgetCells() {\n\t\treturn [...this.el.children]\n\t}\n\n\t/**\n\t * Cleanup after a drag event by deleting any placeholder objects\n\t * and restoring the browser to its pre-drag settings\n\t */\n\tcleanupDrag() {\n\t\tif (this.dragging && this.externalDrag) {\n\t\t\tthis.dragging.remove()\n\t\t}\n\n\t\tdelete this.dragging\n\t\tdelete this.externalDrag\n\t\tthis.getCells().forEach(cell => {\n\t\t\tcell.classList.remove('dragging')\n\t\t})\n\t\tthis.restoreOverscroll('html')\n\t\tthis.restoreOverscroll('body')\n\t}\n\n\t/**\n\t * Determine which cell the pointer/finger is currently over.\n\t * @param {Object} pos \n\t * @returns \n\t */\n\tfindOver(pos) {\n\t\tlet locations = this.findLocations()\n\t\tfor (let loc of locations) {\n\t\t\tif (pos >= loc.top && pos <= loc.bottom) {\n\t\t\t\treturn loc.cell\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the top of the list box\n\t * @returns \n\t */\n\tboxTop() {\n\t\tlet boxRect = this.el.getBoundingClientRect()\n\t\tlet top = boxRect.top\n\t\treturn top\n\t}\n\n\n\t/**\n\t * Sets up the cells to be draggable and makes the mobile touch handles ready for drag.\n\t */\n\trender() {\n\t\tif (this.desktopHandleSelector) {\n\t\t\tthis.el.querySelectorAll(this.desktopHandleSelector).forEach(handle => {\n\t\t\t\thandle.setAttribute(\"draggable\", true)\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tthis.getCells().forEach(cell => {\n\t\t\t\tcell.setAttribute(\"draggable\", true)\n\t\t\t})\n\t\t}\n\t\tif (this.mobileHandleSelector) {\n\t\t\tthis.el.querySelectorAll(this.mobileHandleSelector).forEach(handle => {\n\t\t\t\thandle.style['touch-action'] = 'none'\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @returns The relative locations of the cells in the list\n\t */\n\tfindLocations() {\n\t\tlet top = this.boxTop()\n\n\t\tlet locations = []\n\t\tthis.getCells().forEach(cell => {\n\t\t\tlet rect = cell.getBoundingClientRect()\n\t\t\tlocations.push({\n\t\t\t\ttop: rect.top - top\n\t\t\t\t, bottom: rect.bottom - top\n\t\t\t\t, cell: cell\n\t\t\t})\n\t\t})\n\t\treturn locations\n\t}\n\n\t/**\n\t * Give a node for the cell or a descendent of a cell, returns the node\n\t * for the cell.\n\t * @param {Node} child \n\t * @returns \n\t */\n\tgetCellFromChild(child) {\n\t\tif (child.parentElement == this.el) {\n\t\t\treturn child\n\t\t}\n\t\tif (!child) {\n\t\t\treturn null\n\t\t}\n\t\treturn this.getCellFromChild(child.parentElement)\n\t}\n}\n\n\n","import Dialog from 'ei-dialog'\nimport formValueInjector from 'form-value-injector'\nimport gatherFormData from '@webhandle/gather-form-data'\n\n\nexport default class FormAnswerDialog extends Dialog {\n\t/**\n\t * \n\t * @param {Object} options Properties to create the dialog box. In addition to the properties from Dialog\n\t * there those below.\n\t * @param {Object} options.data The data which will be used to populate the controls in the dialog\n\t */\n\tconstructor(options) {\n\t\tsuper(Object.assign({}, options,\n\t\t\t{\n\t\t\t\ton: {\n\t\t\t\t\t'.btn-ok': () => {\n\t\t\t\t\t\tthis.resolve(this.gatherData())\n\t\t\t\t\t\treturn true\n\t\t\t\t\t},\n\t\t\t\t\t'.mask': () => {\n\t\t\t\t\t\tthis.resolve()\n\t\t\t\t\t\treturn true\n\t\t\t\t\t},\n\t\t\t\t\t'.btn-cancel': () => {\n\t\t\t\t\t\tthis.resolve()\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t))\n\t\tif (this.afterOpen) {\n\t\t\tthis.afterOpenOriginal = this.afterOpen\n\t\t}\n\t\tthis.afterOpen = function (bodyElement, self) {\n\t\t\tif (this.data) {\n\t\t\t\tbodyElement.innerHTML = formValueInjector(bodyElement.innerHTML, this.data)\n\t\t\t}\n\t\t\tlet firstInput = bodyElement.querySelector('input, textarea')\n\t\t\tif (firstInput) {\n\t\t\t\tfirstInput.focus()\n\t\t\t}\n\n\t\t\tif (this.afterOpenOriginal) {\n\t\t\t\tthis.afterOpenOriginal(bodyElement, self)\n\t\t\t}\n\t\t}\n\t}\n\tgatherData() {\n\t\tlet dialogBody = document.querySelector(this.getBodySelector())\n\t\treturn gatherFormData(dialogBody)\n\t}\n\n\tasync open() {\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.resolve = resolve\n\t\t\tthis.reject = reject\n\t\t})\n\t\tsuper.open()\n\n\t\treturn this.promise\n\t}\n\n}","/**\n * Gathers the data from the form controls.\n * @param {HTMLElement} formBody The html element containing the controls. Probably\n * a form tag element, but it really doesn't matter.\n */\nexport default function gatherFormData(formBody) {\n\tlet result = {}\n\tlet controls = formBody.querySelectorAll('input, textarea, select')\n\tfor (let control of controls) {\n\t\tif (control.type === 'checkbox') {\n\t\t\tif (!control.checked) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\telse if (control.type === 'radio') {\n\t\t\tif (!control.checked) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tresult[control.getAttribute('name')] = control.value\n\t}\n\treturn result\n}\n\n","import Streamish from \"./streamish.mjs\"\n\n/**\n * Add this most basic of the EventEmitter functions (on, emit, removeListener) to the browser's\n * EventTarget functionality.\n * \n * The eventEmitter.emit() method allows an arbitrary set of arguments to be passed to the listener \n * functions. Keep in mind that when an ordinary listener function is called, the standard this \n * keyword is intentionally set to reference the EventEmitter instance to which the listener is attached.\n */\nlet base = typeof EventTarget === 'undefined' ? Streamish : EventTarget\nexport default class EventEmitter extends base {\n\tconstructor(target) {\n\t\tsuper(target)\n\t\tif(target) {\n\t\t\tthis.innerEventTarget = target\n\t\t}\n\t\telse {\n\t\t\tthis.innerEventTarget = this\n\t\t}\n\t}\n\t/**\n\t * Adds the listener function to the end of the listeners array for the event named eventName. No checks \n\t * are made to see if the listener has already been added. Multiple calls passing the same combination \n\t * of eventName and listener will result in the listener being added, and called, multiple times.\n\t * @param {string} eventName The event type name\n\t * @param {*} listener The listener function where has arbitrary arguments\n\t */\n\ton(eventName, listener) {\n\t\tif(this.innerEventTarget.addEventListener) {\n\t\t\tlet nativeListener = (event) => {\n\t\t\t\tlistener.apply(this, event.detail)\n\t\t\t}\n\t\t\tlistener.nativeListener = nativeListener\n\t\t\tthis.innerEventTarget.addEventListener(eventName, nativeListener)\n\t\t}\n\t\telse {\n\t\t\tsuper.on(eventName, listener)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Synchronously calls each of the listeners registered for the event named eventName, in the order \n\t * they were registered, passing the supplied arguments to each.\n\t * \n\t * @param {string} eventName The event type name\n\t * @param  {...any} args \n\t */\n\temit(eventName, ...args) {\n\t\tif(this.innerEventTarget.dispatchEvent) {\n\t\t\tthis.innerEventTarget.dispatchEvent(this._makeEvent(eventName, args))\n\t\t}\n\t\telse {\n\t\t\tsuper.emit(eventName, ...args)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Removes the specified listener from the listener array for the event named eventName.\n\t * @param {string} eventName The event type name\n\t * @param {function} listener The listener function\n\t */\n\tremoveListener(eventName, listener) {\n\t\tif(this.innerEventTarget.removeEventListener) {\n\t\t\tlistener = listener.nativeListener || listener\n\t\t\tthis.innerEventTarget.removeEventListener(eventName, listener)\n\t\t}\n\t\telse {\n\t\t\tsuper.removeListener(eventName, listener)\n\t\t}\n\t\treturn this\n\t}\n\t\n\t_makeEvent(eventName, args) {\n\t\tif(typeof CustomEvent === 'function') {\n\t\t\treturn new CustomEvent(eventName, {\n\t\t\t\tdetail: args\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tlet evt = new Event(eventName)\n\t\t\tevt.detail = args\n\t\t\treturn evt\n\t\t}\n\t}\n}","let Emitter\nimport Streamish from \"./streamish.mjs\"\nimport EventEmitter from \"./event-emitter.mjs\"\n\nif (typeof EventTarget !== 'undefined') {\n\tEmitter = EventEmitter\n}\nelse {\n\tEmitter = Streamish\n}\n\n\nexport default Emitter","\nexport default class Streamish {\n\tconstructor() {\n\t\tthis.handles = {}\n\t}\n\n\ton(evt, handle) {\n\t\tlet handles = this.handles[evt]\n\t\tif (!handles) {\n\t\t\thandles = this.handles[evt] = []\n\t\t}\n\t\thandles.push(handle)\n\t\treturn this\n\t}\n\n\temit(evt, ...args) {\n\t\tif (evt in this.handles) {\n\t\t\tfor (let handle of this.handles[evt]) {\n\t\t\t\thandle.apply(this, args)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the specified listener from the listener array for the event named eventName.\n\t * @param {string} eventName The event type name\n\t * @param {function} listener The listener function\n\t */\n\tremoveListener(eventName, listener) {\n\t\tif (eventName in this.handles) {\n\t\t\tthis.handles[eventName] = this.handles[eventName].filter(func => {\n\t\t\t\treturn func !== listener\n\t\t\t})\n\t\t}\n\t}\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport ObjectListView from \"../client-lib/index.mjs\"\n\nlet inputs = document.querySelectorAll('input[type=\"hidden\"].object-list-view')\nfor(let input of inputs) {\n\tlet view = new ObjectListView({\n\t\tinput: input\n\t\t, renderEditForm: \n\t\t`\n\t\t<label>\n\t\t\tName:\n\t\t\t<br>\n\t\t\t<input name=\"name\" type=\"text\" />\n\t\t</label>\n\t\t\n\t\t`\n\t\t, renderTileDetails: function(data) {\n\t\t\treturn `Name: ${data.name}`\n\t\t}\n\n\t\t, afterOpen(bodyElement, self) {\n\t\t\tbodyElement.style.backgroundColor = '#eeeeee'\n\t\t}\n\t\t// , generateStyles() {\n\t\t// \treturn ''\n\t\t// }\n\t\t// , renderTile(data) {\n\t\t// \treturn ''\n\t\t// }\n\t})\n\tview.render()\n\tinput.after(view.el)\n}\n\n"],"names":[],"sourceRoot":""}